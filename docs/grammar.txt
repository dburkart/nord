# Grammar reference for Nord. Documented in roughly BNF.
program         -> statement_list ;

statement_block -> "{" statement_list "}"
statement_list  -> statement
                 | statement statement_list;


# Statements
statement       -> variable_decl
                 | expression "\n"
                 | "return" statement
                 | if_statement
                 | for_statement
                 | function_decl
                 | anonymous_decl ;
if_statement    -> "if" expression statement_block
                 | "if" expression statement ;
for_statement   -> "for" ( IDENTIFIER "in" )? ( IDENTIFIER | STRING | tuple | range ) statement_block ;
function_decl   -> ( "/" "exported" "/" )? "fn" IDENTIFIER ( "(" variable_list ")" )* statement_block ;
anonymous_decl  -> "fn" ( "(" variable_list ")" )* statement_block ;
variable_list   -> IDENTIFIER ( "," variable_list )* ;
variable_decl   -> ( "var" | "let" ) IDENTIFIER ( "=" expression ) "\n" ;

# Expressions
expression_list -> expression ( "," expression_list )* ;
expression      -> assignment
                 | anonymous_decl ;
assignment      -> IDENTIFIER "=" expression
                 | conjunction ;
conjunction     -> equality ( ( "and" | "or" ) equality )* ;
equality        -> comparison ( ( "!=" | "==") comparison )* ;
comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            -> term_md ( ( "-" | "+" ) term_md )* ;
term_md         -> unary ( ( "/" | "*" ) unary )*  ;
unary           -> ( "!" | "-" ) unary
                 | primary ;
primary         -> function_call
                 | range
                 | IDENTIFIER | NUMBER | FLOAT | STRING | "true" | "false" | "nil"
                 | tuple ;
tuple           -> "(" expression_list ")" ;
range           -> ( IDENTIFIER | NUMBER ) ".." ( IDENTIFIER | NUMBER ) ;
function_call   -> IDENTIFIER "(" ( expression_list )* ")" ;
